http://gskinner.com/RegExr/

Флаги:

/g - искать все вхождения
/i - регистронезависимость
/m - сделать началом строки начало строки, если нет этого флага, то начало строки - это начало всего текста 


/by/ - выделяю один by в тексте

/by/gi - выделяю все by в тесте (g), а также все независимо от регистра (i)

/cent(er|re)/g - найдет все слова center или centre

/by|you/gi - выделяю все by и you (например gr(e|a)y, тоже что gr[ea]y  - найдет слова gray и grey)

/[\s,]/g - найдет все пробелы и запятые ([] - используется для обозначения набора символов, которые надо найти)

/[A-Z]/g - нахожу все заглавные буквы

/[a-zA-Z]/g - нахожу все строчные буквы

/[0-9]/g или /\d/g - все цифры 

/[^0-9]/g или /\D/g - нахожу все символы, не входящие в класс 0-9 (из-за ^), те будут отмечены все символы кроме цифр

/\w/g - все символы, которые являются буквами или цифрами

/\W/g - все символы, которые не являются буквами или цифрами

/\s/g - все пробельные символы, табуляция, переходы строк

/\S/g - все кроме пробельных символов, табуляции, переходов строк

/\ban\b/g - нахожу только слова an (\b - означает что в конце или начале слова, в зависимости от того где \b стоит должно быть an, например \bMax\b - выберет только Max)

/\Ban\B/g - нахожу слова где до an и после еще есть символы (например \Ban|an\B - нахожу все слова которые начинаются или заканчиваются an)

/colou?r/g - найдет слова color и colour, так как ? означает что символ после которого он стоит не обязателен

. - выделяет любой символ, кроме переноса строк (если нужна просто точка то ее надо экранировать обратным слешем \.)

/a....e/g, тоже что и /a.{4}e/g - найдет все слова с буквой a, затем 4е символа, затем e

/a.{4}e/g - {число} - означает что предыдущий символ должен повторяться заданное "число" раз

/a.{2,4}e/g - выберет слова, в которых между символом а и е может быть от 2 до 4 символов, включая знаки препинания, и выберется диапазон с максимальным количеством символов, например если есть 'аqwe' и 'aqwrfe' то выберется 'aqwrfe' (это называется жадным повторением), но если сделать так:
/a.{2,4}?e/g, то выберется и 'аqwe' и 'aqwrfe', те будет иметь приоритет a..e (нежадное пвторение)

/a.{1,}?e/g, тоже, что и /a.+?e/g  - выбираю все а, после которых может идти произвольное количество символов до e

/a.+?e/g - выбираю интервал от а до ближайшего е ("+" - означает повторить что-то от одного и больше раз) (нежадное повторение)

/a.*?e/g - выбираю интервал от а до ближайшего е ("*" - означает повторить что-то от нуля и больше раз) (нежадное повторение)

/^Terms/gm - ищу "Terms" в начале строки (^ - поиск в начале строки)

\.$ - ищу '.' в конце строке ($ - поиск в конце строки)

/Terms(?= and)/g - впередсмотрящее выражение, метчатся только слова Terms, после которых идет пробел и 'and', конструкция: "слово"(?=то что должно идти за "слово"), в результате получу только "слово", после которого идет то что должно идти за "слово". Например  /\b\w+?(?=[\s,]*?and)/g - выбираю все слова, которые идут перед , and

\bto\b(?! know) - впередсмотрящее отрицание, выбираю все to, после которых нет пробела + know

/\b\w+@\w+\.\w+\b/g - выбираю все имейлы

/(\b\w+)@(\w+\.\w+\b)/g - все имейлы с разбивкой на группы (когда отдельные группы в () - это называется запоминающая группа, чтобы сделать не запоминающую группу нужно после открывающей группу скобки поставить "?:", те (?:\b\w+)@(?:\w+\.\w+\b))

/java(script)?/g - выбираю слова java и javascript, а если /java(?:script)?/g, то незапоминающая группа. Это тоже, что и /java(script){0,1}/g

Отдельно стоящий ? это {0,1}