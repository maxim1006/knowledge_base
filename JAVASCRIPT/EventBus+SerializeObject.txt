/***Event Bus***/
    class EventBus {

        constructor() {
            this.constants = {};
        }

        /**
         * Handle event with name 'eventName'.
         * @param {String} eventName
         * @param {Function} callback - function which will be called when event will be fired.
         *                              function (data) {} - data - event parameters
         */
        on(eventName, callback) {

            if (!this.eventCallbacks) this.eventCallbacks = {};

            if (!this.eventCallbacks[eventName]) {
                this.eventCallbacks[eventName] = [];
            }

            this.eventCallbacks[eventName].push(callback);
        }

        /**
         * Remove an event handler with name 'eventName'.
         * @param {String} eventName
         * @param {Function} callback
         *
         */
        off(eventName, callback) {

            if (eventName.charAt(0) === '.') { //if namespaced event
                this.removeNamespaceHandlers(eventName);
                return;
            }

            let callbacks = this.eventCallbacks[eventName];

            if (!callbacks) return;

            for (let i = 0, length = callbacks.length; i < length; i++) {

                if (callbacks[i] === callback) {
                    callbacks.splice(i--, 1);
                }

            }

        }

        /**
         * Fires event with name 'eventName' and handle their data
         * @param {String} eventName
         *
         */
        trigger(eventName) {

            let callbacks = this.eventCallbacks[eventName],
                data = Array.prototype.slice.call(arguments, 1);

            if (!this.eventCallbacks[eventName]) {
                return;
            }

            for (let i = 0, length = callbacks.length; i < length; i++) {
                callbacks[i].apply(this, data);
            }

        }

        /**
         * Remove all handlers on current namespace
         * @param namespace - string, ex.: ".namespace"
         */
        removeNamespaceHandlers(namespace) {
            let callbacks = this.eventCallbacks;

            for (let key in callbacks) {
                if (callbacks.hasOwnProperty(key) && this.hasNamespace(key, namespace)) {

                    callbacks[key] = null;

                }
            }
        }

        hasNamespace(string, namespace) {
            return ~string.indexOf(namespace);
        }

    }



//������� �������� �� ����� � ���� array, ������� ��� ������������
 nc.portal.FormManager.serializeObject =  function(formData) {
        var o = {};
        var a = formData.serializeArray();
        $.each(a, function() {
            if (o[this.name] !== undefined) {
                if (!o[this.name].push) {
                    o[this.name] = [o[this.name]];
                }
                o[this.name].push(this.value || '');
            } else {
                o[this.name] = this.value || '';
            }
        });
        return o;
    };

�������������: JSON.stringify(nc.portal.FormManager.serializeObject(this.content.find(".js-formAccount")))
